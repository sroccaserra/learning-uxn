( Flow )

%RTN { JMP2r }
%RTN? { #01 JCN RTN }

( Shorthands for logic and arithmetic opcodes )

%+  { ADD }  %-  { SUB }  %*  { MUL }  %/  { DIV }
%<  { LTH }  %>  { GTH }  %=  { EQU }  %!  { NEQ }
%++ { ADD2 } %-- { SUB2 } %** { MUL2 } %// { DIV2 }
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }

%=~ { EQUk NIP } %!~ { NEQk NIP }
%<~ { LTHk NIP } %>~ { GTHk NIP }

%2*  { #10 SFT } %2/  { #01 SFT } %2**  { #10 SFT2 } %2//  { #01 SFT2 }
%4*  { #20 SFT } %4/  { #02 SFT } %4**  { #20 SFT2 } %4//  { #02 SFT2 }
%8*  { #30 SFT } %8/  { #03 SFT } %8**  { #30 SFT2 } %8//  { #03 SFT2 }
%10* { #40 SFT } %10/ { #04 SFT } %10** { #40 SFT2 } %10// { #04 SFT2 }
%20* { #50 SFT } %20/ { #05 SFT } %20** { #50 SFT2 } %20// { #05 SFT2 }

%2MOD  { #01 AND } %2MOD2  { #0001 AND2 }
%4MOD  { #03 AND } %4MOD2  { #0003 AND2 }
%8MOD  { #07 AND } %8MOD2  { #0007 AND2 }
%10MOD { #0f AND } %10MOD2 { #000f AND2 }

%DIF { GTHk JMP SWP SUB }
%MOD  { DIVk MUL SUB }
%MOD2 { DIV2k MUL2 SUB2 }
%MIN { LTHk JMP SWP POP }
%MAX { GTHk JMP SWP POP }
%MIN2 { LTH2k JMP SWP2 POP2 }
%MAX2 { GTH2k JMP SWP2 POP2 }

%TOS  { #00 SWP }

( Parse )

%EOL? { \n EQU }

( Print & Debug )

%\n { #0a }
%EMIT { .Console/write DEO }
%LF { \n EMIT }
%PRINT { ;print-str JSR2 LF }

%HALT { #01 .System/halt DEO }
%DUMP { #0101 .System/debug DEO2 }
%DEBUG { ;print-hex/byte JSR2 LF }
%DEBUG2 { ;print-hex JSR2 LF }

%BRK? { #01 JCN BRK }

( See: https://github.com/jonathanperret/aoc2021/blob/main/library/string.tal )

%S< { ;inline-str JSR2 } %>S { 00 }
%P< { S< }               %>P { >S ;print-str JSR2 }

~src/macros.tal

%E { #40 }
%CHAR-TO-OFFSET { #20 - #00 SWP #30 SFT2 }

( devices )

|00 @System     [ &vector $2 &wst $1 &rst $1 &eaddr $2 &ecode $1 &pad $1 &r $2 &g $2 &b $2 &debug $1 &halt $1 ]
|10 @Console    [ &vector $2 &read $1 &pad $5 &write $1 &error $1 ]
|20 @Screen     [ &vector $2 &width $2 &height $2 &auto $1 &pad $1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|40 @Audio1     [ &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|50 @Audio2     [ &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|60 @Audio3     [ &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|80 @Controller [ &vector $2 &button $1 &key $1 ]
|a0 @File       [ &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2 ]

( constants )

|10 @UP
|20 @DOWN
|40 @LEFT
|80 @RIGHT

|0100 @SCREEN_WIDTH
|00e0 @SCREEN_HEIGHT

|1c @SCREEN_TILE_HEIGHT
|20 @SCREEN_TILE_WIDTH


( zero page )

|00
@timer $1
@play-head $1
@cursor [ &i $1 &j $1 ]

( init )

|0100 @program
    #00 .timer STZ
    #ff .play-head STZ
    #04 .cursor/i STZ
    #05 .cursor/j STZ

    ( theme )
    #3a5d .System/r DEO2
    #3acd .System/g DEO2
    #3aad .System/b DEO2

    ;SCREEN_WIDTH .Screen/width DEO2
    ;SCREEN_HEIGHT .Screen/height DEO2

    ;load-font JSR2
    ;init-sound JSR2
    ;on-frame .Screen/vector DEO2
    ;on-controller .Controller/vector DEO2
BRK

@load-font
    ;font-path .File/name DEO2
    #0900 .File/length DEO2
    ;font .File/read DEO2
RTN

@init-sound
    #1202 .Audio0/adsr DEO2 ( Enveloppe )
    ;saw  .Audio0/addr DEO2 ( Where the waveform is )
    #0100 .Audio0/length DEO2 ( How long the waveform is )
    #44   .Audio0/volume DEO ( Volume/Balance )
RTN

@on-frame
    ;update JSR2
    ;draw JSR2
BRK

@on-controller
    .Controller/button DEI
    .UP !~ ,&no-up JCN .cursor/i LDZ #01 - .cursor/i STZ &no-up
    .DOWN !~ ,&no-down JCN .cursor/i LDZ INC .cursor/i STZ &no-down
    .LEFT !~ ,&no-left JCN .cursor/j LDZ #01 - .cursor/j STZ &no-left
    .RIGHT !~ ,&no-right JCN .cursor/j LDZ INC .cursor/j STZ &no-right
    POP
BRK

@update
    .timer LDZ INC DUP .timer STZ
    10MOD #00 EQU RTN?

    .play-head LDZ INC #10 MOD DUP .play-head STZ ( play-head^ )
    TOS ;pattern ADD2 LDA
    DUP ,&play JCN
    POP ,&skip JMP
    &play
    .Audio0/pitch DEO
    &skip
RTN

@draw
    ;draw-background JSR2

    ( draw the title )
    #0010 .Screen/x DEO2
    #0010 .Screen/y DEO2
    ;title-txt #03 ;draw-uf1 JSR2

    ;draw-pattern JSR2
    ;draw-cursor JSR2

    ( draw the play head )
    #0008 .Screen/x DEO2
    .play-head LDZ 8* TOS #0020 ++ .Screen/y DEO2
    ;tile2 .Screen/addr DEO2
    #02 .Screen/sprite DEO
RTN

@draw-background
    ;tile1 .Screen/addr DEO2
    .SCREEN_TILE_HEIGHT #00
    &loop-y
        DUP TOS 8** .Screen/y DEO2
        .SCREEN_TILE_WIDTH #00
        &loop-x
            DUP TOS 8** .Screen/x DEO2
            ( OVR #10 * OVR + )
            #81 .Screen/sprite DEO
            INC NEQk ,&loop-x JCN
            POP2
        INC NEQk ,&loop-y JCN
        POP2
RTN

@draw-pattern
    #10 #00
    &loop
        DUP 8* #20 + TOS .Screen/y DEO2
        DUP TOS ;pattern ++ LDA

        #0010 .Screen/x DEO2
        DUP 10/
        ;to-hex-char JSR2
        #01 ;draw-glyph-uf1 JSR2

        #0018 .Screen/x DEO2
        #0f AND
        ;to-hex-char JSR2
        #01 ;draw-glyph-uf1 JSR2

        INC NEQk ,&loop JCN
        POP POP
RTN

@to-hex-char ( n^ -- char^ )
    DUP #0a LTH ,&dec JCN
    #27 +
    &dec
    #30 +
RTN

@draw-cursor
    #00 .cursor/j LDZ 8** .Screen/x DEO2
    #00 .cursor/i LDZ 8** .Screen/y DEO2
    LIT 'x ;get-glyph-uf1 JSR2 .Screen/addr DEO2
    #01 .Screen/sprite DEO
RTN

@draw-uf1 ( string* color -- )
    STH
    AUTO-NONE
    &while
        LDAk STHrk ,draw-glyph-uf1 JSR
        INC2 LDAk ,&while JCN
    POP2 POPr
RTN

@draw-glyph-uf1 ( char color -- )
    .Screen/x DEI2 STH2
    OVR ,get-glyph-uf1 JSR .Screen/addr DEO2
    .Screen/sprite DEO
    TOS ;font ++ LDA ( get width )
    TOS STH2r ++ .Screen/x DEO2
RTN

@get-glyph-uf1 ( char -- addr* )
    TOS #30 SFT2 ;font ++
    #0100 ++ ( skip width data )
RTN

~src/common.tal

@title-txt "Tracker 20 "WIP 00

@pattern ( pitches only for now )
40 00 42 43 44 45 46 47
48 00 4a 4b 4c 4d 4e 4f

@tile1
ff81 8181 8181 81ff
fffe fefe fefe fe00

@tile2
ff81 bda5 a5bd 81ff
fffe c2de dede fe00

@saw
~assets/saw.tal

@font-path "fonts/atari8.uf1 00
@font

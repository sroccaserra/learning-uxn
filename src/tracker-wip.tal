( macros )

~src/macros.tal

%CHAR-TO-OFFSET { #20 - #00 SWP #30 SFT2 }

( constants )

%UP { #10 }
%DOWN { #20 }
%LEFT { #40 }
%RIGHT { #80 }

%SCREEN_WIDTH { #0100 }
%SCREEN_HEIGHT { #00e0 }

%SCREEN_TILE_HEIGHT { #1c }
%SCREEN_TILE_WIDTH { #20 }

%COLOR_ON { #03 }
%COLOR_OFF { #01 }

( devices )

|00 @System     [ &vector $2 &wst $1 &rst $1 &eaddr $2 &ecode $1 &pad $1 &r $2 &g $2 &b $2 &debug $1 &halt $1 ]
|10 @Console    [ &vector $2 &read $1 &pad $5 &write $1 &error $1 ]
|20 @Screen     [ &vector $2 &width $2 &height $2 &auto $1 &pad $1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|40 @Audio1     [ &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|50 @Audio2     [ &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|60 @Audio3     [ &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|80 @Controller [ &vector $2 &button $1 &key $1 ]
|a0 @File       [ &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2 ]

( zero page )

|00
@timer [ &beat $1 &speed $1 ]
@play-head $1
@cursor [ &i $1 &j $1 ]

( init )

|0100 @program
    #08 .timer/speed STZ
    #ff .play-head STZ
    #04 .cursor/i STZ
    #06 .cursor/j STZ

    ( theme )
    #3a5d .System/r DEO2
    #3acd .System/g DEO2
    #3aad .System/b DEO2

    SCREEN_WIDTH .Screen/width DEO2
    SCREEN_HEIGHT .Screen/height DEO2

    ;font #0900 ;font-path ;load-file JSR2

    ;saw #0100 ;saw-path ;load-file JSR2
    ;pulse #0100 ;pulse-path ;load-file JSR2
    ;sin #0100 ;sin-path ;load-file JSR2
    ;kick #2000 ;kick-path ;load-file JSR2
    ;chat #2000 ;chat-path ;load-file JSR2

    ;init-sound JSR2
    ;on-frame .Screen/vector DEO2
    ;on-controller .Controller/vector DEO2
BRK

@load-file ( dst-addr* lenght* path-str* -- )
    .File/name DEO2
    .File/length DEO2
    .File/read DEO2
RTN

@init-sound ( -- )
    #0202 .Audio0/adsr DEO2 ( Enveloppe )
    ;pulse  .Audio0/addr DEO2 ( Where the waveform is )
    #0100 .Audio0/length DEO2 ( How long the waveform is )
    #22   .Audio0/volume DEO ( Volume/Balance )
RTN

@on-frame ( -- )
    ;update JSR2
    ;draw JSR2
BRK

@on-controller ( -- )
    .Controller/button DEI #01 AND ;on-control JCN2

    .Controller/button DEI
    UP !~ ,&no-up-b JCN ;cursor-up JSR2 &no-up-b
    DOWN !~ ,&no-down-b JCN ;cursor-down JSR2 &no-down-b
    LEFT !~ ,&no-left-b JCN ;cursor-left JSR2 &no-left-b
    RIGHT !~ ,&no-right-b JCN ;cursor-right JSR2 &no-right-b
    POP

    .Controller/key DEI
    [ LIT 'h ] !~ ,&no-left-k JCN ;cursor-left JSR2 &no-left-k
    [ LIT 'j ] !~ ,&no-down-k JCN ;cursor-down JSR2 &no-down-k
    [ LIT 'k ] !~ ,&no-up-k JCN ;cursor-up JSR2 &no-up-k
    [ LIT 'l ] !~ ,&no-right-k JCN ;cursor-right JSR2 &no-right-k
    POP
BRK

@on-control ( -- )
    .Controller/key DEI
    [ LIT 'x ] !~ ,&no-ctrl-x JCN ;dec-at-cursor JSR2 &no-ctrl-x
    [ LIT 'a ] !~ ,&no-ctrl-a JCN ;inc-at-cursor JSR2 &no-ctrl-a
    POP
BRK

@cursor-up ( -- )
    .cursor/i LDZ #01 - .cursor/i STZ
RTN

@cursor-down ( -- )
    .cursor/i LDZ INC .cursor/i STZ
RTN

@cursor-left ( -- )
    .cursor/j LDZ #01 - .cursor/j STZ
RTN

@cursor-right ( -- )
    .cursor/j LDZ INC .cursor/j STZ
RTN

@dec-at-cursor ( -- )
    .cursor/i LDZ #03 < ,&end JCN
    .cursor/i LDZ #13 > ,&end JCN

    #00 .cursor/i LDZ #04 - ( pattern-row-index )
    ;pattern ++ STH2k LDA ( pattern-row )
    ;is-on-octave-col JSR2 ,&dec-octave JCN

    DUP 10/ ( pattern-row note-index )
    ;dec-note JSR2
    10* SWP #0f AND +
    ,&end JMP

    &dec-octave
    DUP #0f AND ( pattern-row octave )
    ;dec-octave JSR2
    SWP #f0 AND +
    &end
    STH2r STA
RTN

@dec-note ( note-index^ -- note-index^ )
    #01 -
    #0c <~ ,&end JCN
        POP #0b
    &end
RTN

@dec-octave ( octave^ -- octave^ )
    #01 -
    #08 <~ ,&end JCN
        POP #07
    &end
RTN

@inc-at-cursor ( -- )
    .cursor/i LDZ #03 < ,&end JCN
    .cursor/i LDZ #13 > ,&end JCN

    #00 .cursor/i LDZ #04 - ( pattern-row-index )
    ;pattern ++ STH2k LDA ( pattern-row )
    ;is-on-octave-col JSR2 ,&inc-octave JCN
    DUP 10/
    ;inc-note JSR2
    10* SWP #0f AND +
    ,&end JMP
    &inc-octave
    DUP #0f AND ( pattern-row octave )
    ;inc-octave JSR2
    SWP #f0 AND +
    &end
    STH2r STA
RTN

@inc-note ( note-index^ -- note-index^ )
    INC
    #0c <~ ,&end JCN
        POP #00
    &end
RTN

@inc-octave ( octave^ -- octave^ )
    INC
    #08 <~ ,&end JCN
        POP #00
    &end
RTN


@is-on-octave-col ( -- bool^ )
    .cursor/j LDZ #03 GTH
RTN

@update ( -- )
    .timer LDZ2 ! ,&end JCN

    .play-head LDZ INC #10 MOD DUP .play-head STZ ( play-head^ )
    TOS ;pattern ADD2 LDA
    DUP ,&play JCN
    POP ,&skip JMP
    &play
    ;midi-note JSR2 .Audio0/pitch DEO
    &skip
    #00 .timer/beat STZ
    &end
    .timer/beat LDZk INC SWP STZ
RTN

@draw ( -- )
    ;draw-background JSR2

    ( draw the title )
    #0010 .Screen/x DEO2
    #0010 .Screen/y DEO2
    ;title-txt #03 ;draw-uf1 JSR2

    ;draw-pattern JSR2
    ;draw-cursor JSR2

    ( draw the play head )
    #0008 .Screen/x DEO2
    .play-head LDZ 8* TOS #0020 ++ .Screen/y DEO2
    ;tile2 .Screen/addr DEO2
    #02 .Screen/sprite DEO
RTN

@draw-background ( -- )
    ;tile1 .Screen/addr DEO2
    SCREEN_TILE_HEIGHT #00
    &loop-y
        DUP TOS 8** .Screen/y DEO2
        SCREEN_TILE_WIDTH #00
        &loop-x
            DUP TOS 8** .Screen/x DEO2
            ( OVR #10 * OVR + )
            #81 .Screen/sprite DEO
            INC NEQk ,&loop-x JCN
            POP2
        INC NEQk ,&loop-y JCN
        POP2
RTN

@draw-pattern ( -- )
    #10 #00
    AUTO-X
    &loop
        DUP 8* #20 + TOS .Screen/y DEO2
        DUP TOS ;pattern ++ LDA
        DUP #00 EQU ,&no-trigger JCN

        COLOR_ON STH
        #0010 .Screen/x DEO2

        DUP 10/ 2*
        TOS ;note-labels ++ DUP2
        LDA STHrk ;draw-glyph-uf1 JSR2
        INC2
        LDA STHrk ;draw-glyph-uf1 JSR2

        #0f AND ;to-hex-char JSR2
        STHr ;draw-glyph-uf1 JSR2

        ,&continue JMP

        &no-trigger
        POP
        COLOR_OFF STH
        #0010 .Screen/x DEO2
        LIT '-
        DUP STHrk ;draw-glyph-uf1 JSR2
        DUP STHrk ;draw-glyph-uf1 JSR2
        STHr ;draw-glyph-uf1 JSR2

        &continue
        INC NEQk ,&loop JCN
        POP POP
RTN

@to-hex-char ( n^ -- char^ )
    DUP #0a LTH ,&dec JCN
    #27 +
    &dec
    #30 +
RTN

@draw-cursor ( -- )
    #00 .cursor/j LDZ 8** .Screen/x DEO2
    #00 .cursor/i LDZ 8** .Screen/y DEO2
    LIT 'x ;get-glyph-uf1 JSR2 .Screen/addr DEO2
    #01 .Screen/sprite DEO
RTN

@draw-uf1 ( string* color -- )
    STH
    AUTO-NONE
    &while
        LDAk STHrk ,draw-glyph-uf1 JSR
        INC2 LDAk ,&while JCN
    POP2 POPr
RTN

@draw-glyph-uf1 ( char color -- )
    .Screen/x DEI2 STH2
    OVR ,get-glyph-uf1 JSR .Screen/addr DEO2
    .Screen/sprite DEO
    TOS ;font ++ LDA ( get width )
    TOS STH2r ++ .Screen/x DEO2
RTN

@get-glyph-uf1 ( char -- addr* )
    TOS #30 SFT2 ;font ++
    #0100 ++ ( skip width data )
RTN

@midi-note ( pattern-row -- hex-midi-note )
    DUP
    #0f AND INC #0c MUL ( octave offset )
    SWP 10/ ( note offset )
    ADD
RTN

~src/common.tal

@title-txt "Tracker 20 "WIP 00

@note-labels
"C-
"C#
"D-
"D#
"E-
"F-
"F#
"G-
"G#
"A-
"A#
"B-

( first nibble is pitch 0 <= p <= b, second is octave )
@pattern
04 00 00 00 04 00 00 00
04 00 00 00 04 00 04 00

@tile1
ff81 8181 8181 81ff
fffe fefe fefe fe00

@tile2
ff81 bda5 a5bd 81ff
fffe c2de dede fe00

@saw-path "assets/saw.pcm 00
@saw $0100

@pulse-path "assets/pulse.pcm 00
@pulse $0100

@sin-path "assets/sin.pcm 00
@sin $0100

@kick-path "assets/kck2.pcm 00
@kick $2000

@chat-path "assets/chat.pcm 00
@chat $2000

@font-path "fonts/bbcmicro8.uf1 00
@font $0900

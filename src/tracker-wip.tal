( macros )

~src/macros.tal

( constants )

%UP { #10 }
%DOWN { #20 }
%LEFT { #40 }
%RIGHT { #80 }

%SCREEN_WIDTH { #0100 }
%SCREEN_HEIGHT { #00e0 }

%SCREEN_TILE_HEIGHT { #1c }
%SCREEN_TILE_WIDTH { #20 }

%COLOR_NOTE { #03 }
%COLOR_OCTAVE { #03 }
%COLOR_INSTRUMENT { #02 }
%COLOR_VOLUME { #03 }
%COLOR_OFF { #01 }

%NB_INSTRUMENTS { #08 }
%INSTRUMENT_SIZE { #07 }

%PATTERN_ROW_SIZE { #03 }

( devices )

|00 @System     [ &vector $2 &wst $1 &rst $1 &eaddr $2 &ecode $1 &pad $1 &r $2 &g $2 &b $2 &debug $1 &halt $1 ]
|10 @Console    [ &vector $2 &read $1 &pad $5 &write $1 &error $1 ]
|20 @Screen     [ &vector $2 &width $2 &height $2 &auto $1 &pad $1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|40 @Audio1     [ &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|50 @Audio2     [ &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|60 @Audio3     [ &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|80 @Controller [ &vector $2 &button $1 &key $1 ]
|a0 @File       [ &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2 ]

( zero page )

|00
@timer [ &beat $1 &speed $1 ]
@play-head $1
@cursor [ &i $1 &j $1 ]

( init )

|0100 @program
    #08 .timer/speed STZ
    #ff .play-head STZ
    #04 .cursor/i STZ
    #04 .cursor/j STZ

    ( theme )
    #3a5d .System/r DEO2
    #3acd .System/g DEO2
    #3aad .System/b DEO2

    SCREEN_WIDTH .Screen/width DEO2
    SCREEN_HEIGHT .Screen/height DEO2

    ;font #0900 ;font-path ;load-file JSR2

    NB_INSTRUMENTS #00
    &loop
        DUP INSTRUMENT_SIZE * TOS DUP2
        ;instruments/address ++ LDA2 SWP2 DUP2
        ;instruments/size ++ LDA2 SWP2
        ;instruments/file-path ++ LDA2
        ;load-file JSR2
        INC NEQk ,&loop JCN
    POP POP

    ;init-sound JSR2
    ;on-frame .Screen/vector DEO2
    ;on-controller .Controller/vector DEO2
BRK

@load-file ( dst-addr* lenght* path-str* -- )
    .File/name DEO2
    .File/length DEO2
    .File/read DEO2
RTN

@init-sound ( -- )
    #0202 .Audio0/adsr DEO2 ( Enveloppe )
RTN

@on-frame ( -- )
    ;update JSR2
    ;draw JSR2
BRK

@on-controller ( -- )
    .Controller/button DEI #01 AND ;on-control JCN2

    .Controller/button DEI
    UP !~ ,&no-up-b JCN ;cursor-up JSR2 &no-up-b
    DOWN !~ ,&no-down-b JCN ;cursor-down JSR2 &no-down-b
    LEFT !~ ,&no-left-b JCN ;cursor-left JSR2 &no-left-b
    RIGHT !~ ,&no-right-b JCN ;cursor-right JSR2 &no-right-b
    POP

    .Controller/key DEI
    [ LIT 'h ] !~ ,&no-left-k JCN ;cursor-left JSR2 &no-left-k
    [ LIT 'j ] !~ ,&no-down-k JCN ;cursor-down JSR2 &no-down-k
    [ LIT 'k ] !~ ,&no-up-k JCN ;cursor-up JSR2 &no-up-k
    [ LIT 'l ] !~ ,&no-right-k JCN ;cursor-right JSR2 &no-right-k
    POP
BRK

@on-control ( -- )
    .Controller/key DEI
    [ LIT 'x ] !~ ,&no-ctrl-x JCN ;dec-at-cursor JSR2 &no-ctrl-x
    [ LIT 'a ] !~ ,&no-ctrl-a JCN ;inc-at-cursor JSR2 &no-ctrl-a
    POP
BRK

@cursor-up ( -- )
    .cursor/i LDZ #01 - .cursor/i STZ
RTN

@cursor-down ( -- )
    .cursor/i LDZ INC .cursor/i STZ
RTN

@cursor-left ( -- )
    .cursor/j LDZ #01 - .cursor/j STZ
RTN

@cursor-right ( -- )
    .cursor/j LDZ INC .cursor/j STZ
RTN

@dec-at-cursor ( -- )
    .cursor/i LDZ #03 < ,&end JCN
    .cursor/i LDZ #13 > ,&end JCN

    .cursor/i LDZ #04 - ( pattern-row-index^ )
    PATTERN_ROW_SIZE * TOS ( pattern-row-offset* )
    ;is-on-octave-col JSR2 ,&dec-octave JCN
    ;is-on-instrument-col JSR2 ,&dec-instrument JCN
    ;is-on-volume-l-col JSR2 ,&dec-volume-l JCN
    ;is-on-volume-r-col JSR2 ,&dec-volume-r JCN
        ;dec-note JSR2 ,&end JMP
        &dec-octave
        ;dec-octave JSR2 ,&end JMP
        &dec-instrument
        ;dec-instrument JSR2 ,&end JMP
        &dec-volume-l
        ;dec-volume-l JSR2 ,&end JMP
        &dec-volume-r
        ;dec-volume-r JSR2
    &end
RTN

@dec-note ( pattern-row-offset* -- )
    ;pattern/note-octave ++ STH2k LDA
    DUP 10/
    #01 -
    #0c <~ ,&end JCN
        POP #0b
    &end
    10* SWP #0f AND +
    STH2r STA
RTN

@dec-octave ( pattern-row-offset* -- )
    ;pattern/note-octave ++ STH2k LDA
    DUP #0f AND
    #01 -
    #08 <~ ,&end JCN
        POP #07
    &end
    SWP #f0 AND +
    STH2r STA
RTN

@dec-instrument ( pattern-row-offset* -- )
    ;pattern/instrument ++ STH2k LDA
    DUP 10/
    #01 -
    #08 <~ ,&end JCN
        POP #07
    &end
    10* SWP #0f AND +
    STH2r STA
RTN

@dec-volume-l ( pattern-row-offset* -- )
    ;pattern/volume ++ STH2k LDA
    DUP 10/
    #01 - #0f AND
    10* SWP #0f AND +
    STH2r STA
RTN

@dec-volume-r ( pattern-row-offset* -- )
    ;pattern/volume ++ STH2k LDA
    DUP #0f AND
    #01 - #0f AND
    SWP #f0 AND +
    STH2r STA
RTN

@inc-at-cursor ( -- )
    .cursor/i LDZ #03 < ,&end JCN
    .cursor/i LDZ #13 > ,&end JCN

    .cursor/i LDZ #04 - ( pattern-row-index^ )
    PATTERN_ROW_SIZE * TOS ( pattern-row-offset* )
    ;is-on-octave-col JSR2 ,&inc-octave JCN
    ;is-on-instrument-col JSR2 ,&inc-instrument JCN
    ;is-on-volume-l-col JSR2 ,&inc-volume-l JCN
    ;is-on-volume-r-col JSR2 ,&inc-volume-r JCN
        ;inc-note JSR2 ,&end JMP
        &inc-octave
        ;inc-octave JSR2 ,&end JMP
        &inc-instrument
        ;inc-instrument JSR2 ,&end JMP
        &inc-volume-l
        ;inc-volume-l JSR2 ,&end JMP
        &inc-volume-r
        ;inc-volume-r JSR2
    &end
RTN

@inc-note ( pattern-row-offset* -- )
    ;pattern/note-octave ++ STH2k LDA
    DUP 10/
    INC
    #0c <~ ,&end JCN
        POP #00
    &end
    10* SWP #0f AND +
    STH2r STA
RTN

@inc-octave ( pattern-row-offset* -- )
    ;pattern/note-octave ++ STH2k LDA
    DUP #0f AND
    INC
    #08 <~ ,&end JCN
        POP #00
    &end
    SWP #f0 AND +
    STH2r STA
RTN

@inc-instrument ( pattern-row-offset* -- )
    ;pattern/instrument ++ STH2k LDA
    DUP 10/
    INC
    #08 <~ ,&end JCN
        POP #00
    &end
    10* SWP #0f AND +
    STH2r STA
RTN

@inc-volume-l ( pattern-row-offset* -- )
    ;pattern/volume ++ STH2k LDA
    DUP 10/
    INC #0f AND
    10* SWP #0f AND +
    STH2r STA
RTN

@inc-volume-r ( pattern-row-offset* -- )
    ;pattern/volume ++ STH2k LDA
    DUP #0f AND
    INC #0f AND
    SWP #f0 AND +
    STH2r STA
RTN

@is-on-octave-col ( -- bool^ )
    .cursor/j LDZ #04 EQU
RTN

@is-on-instrument-col ( -- bool^ )
    .cursor/j LDZ #05 EQU
RTN

@is-on-volume-l-col ( -- bool^ )
    .cursor/j LDZ #06 EQU
RTN

@is-on-volume-r-col ( -- bool^ )
    .cursor/j LDZ #07 EQU
RTN


@update ( -- )
    .timer LDZ2 ! ,&end JCN

    .play-head LDZ INC #10 MOD DUP .play-head STZ ( play-head^ )
    PATTERN_ROW_SIZE * ( pattern-row-offset^ )
    DUP TOS ;pattern ++ ( pattern-row-offset^ note-octave-addr* )
    LDA ,&play JCN
    POP ,&skip JMP
        &play
        ;play JSR2
        &skip
        #00 .timer/beat STZ
    &end
    .timer/beat LDZk INC SWP STZ
RTN

@play ( pattern-row-offset^ -- )
    TOS STH2k
    ;pattern/volume ++ LDA
    .Audio0/volume DEO
    STH2rk ;pattern/instrument ++ LDA
    10/ INSTRUMENT_SIZE * TOS DUP2 DUP2
    ;instruments/address ++ LDA2 .Audio0/addr DEO2
    ;instruments/size ++ LDA2 .Audio0/length DEO2
    ;instruments/loop ++ LDA #00 EQU #70 SFT
    STH2r ;pattern/note-octave ++ LDA ( loop-bit^ note-and-octave^ )
    ;midi-note JSR2 + .Audio0/pitch DEO
RTN

@draw ( -- )
    ;draw-background JSR2

    ( draw the title )
    #0010 .Screen/x DEO2
    #0010 .Screen/y DEO2
    ;title-txt #03 ;draw-uf1 JSR2

    ;draw-pattern JSR2
    ;draw-cursor JSR2

    ( draw the play head )
    #0008 .Screen/x DEO2
    .play-head LDZ 8* TOS #0020 ++ .Screen/y DEO2
    ;tile2 .Screen/addr DEO2
    #02 .Screen/sprite DEO
RTN

@draw-background ( -- )
    ;tile1 .Screen/addr DEO2
    SCREEN_TILE_HEIGHT #00
    &loop-y
        DUP TOS 8** .Screen/y DEO2
        SCREEN_TILE_WIDTH #00
        &loop-x
            DUP TOS 8** .Screen/x DEO2
            ( OVR #10 * OVR + )
            #81 .Screen/sprite DEO
            INC NEQk ,&loop-x JCN
            POP2
        INC NEQk ,&loop-y JCN
        POP2
RTN

@draw-pattern ( -- )
    AUTO-X
    #10 #00
    &loop
        DUP 8* #20 + TOS .Screen/y DEO2
        DUP PATTERN_ROW_SIZE * ( pattern-row-offset^ )
        DUP TOS ;pattern ++ ( pattern-row-offset^ row-addr* )
        LDA #00 EQU ,&no-trigger JCN
            ;draw-row JSR2
            ,&continue JMP
            &no-trigger
            ;draw-empty-row JSR2
            POP
        &continue
        INC NEQk ,&loop JCN
        POP POP
RTN

@draw-row ( pattern-row-offset^ -- )
    #0010 .Screen/x DEO2

    TOS STH2k

    ;pattern/note-octave ++ LDA
    ( draw note label )
    DUP 10/ 2*
    TOS ;note-labels ++ DUP2
    LDA COLOR_NOTE ;draw-glyph-uf1 JSR2
    INC2
    LDA COLOR_NOTE ;draw-glyph-uf1 JSR2

    ( draw octave number )
    #0f AND ;to-hex-char JSR2
    COLOR_OCTAVE ;draw-glyph-uf1 JSR2

    ( draw instrument number )
    STH2rk ;pattern/instrument ++ LDA
    10/ ;to-hex-char JSR2
    COLOR_INSTRUMENT ;draw-glyph-uf1 JSR2

    ( draw volume left & right )
    STH2r ;pattern/volume ++ LDA
    DUP 10/ ;to-hex-char JSR2
    COLOR_VOLUME ;draw-glyph-uf1 JSR2
    #0f AND ;to-hex-char JSR2
    COLOR_VOLUME ;draw-glyph-uf1 JSR2
RTN

@draw-empty-row ( -- )
    #0010 .Screen/x DEO2
    LIT '- COLOR_OFF ;draw-glyph-uf1 JSR2
    LIT '- COLOR_OFF ;draw-glyph-uf1 JSR2
    LIT '- COLOR_OFF ;draw-glyph-uf1 JSR2
    LIT '- COLOR_OFF ;draw-glyph-uf1 JSR2
    LIT '- COLOR_OFF ;draw-glyph-uf1 JSR2
    LIT '- COLOR_OFF ;draw-glyph-uf1 JSR2
RTN

@to-hex-char ( n^ -- char^ )
    DUP #0a LTH ,&dec JCN
    #27 +
    &dec
    #30 +
RTN

@draw-cursor ( -- )
    #00 .cursor/j LDZ 8** .Screen/x DEO2
    #00 .cursor/i LDZ 8** .Screen/y DEO2
    ;cursor-tile .Screen/addr DEO2
    #0a .Screen/sprite DEO
RTN

@draw-uf1 ( string* color^ -- )
    AUTO-NONE
    STH
    &while
        LDAk STHrk ,draw-glyph-uf1 JSR
        INC2 LDAk ,&while JCN
    POP2 POPr
RTN

@draw-glyph-uf1 ( char^ color^ -- )
    .Screen/x DEI2 STH2
    OVR ,get-glyph-uf1 JSR .Screen/addr DEO2
    .Screen/sprite DEO
    TOS ;font ++ LDA ( get width )
    TOS STH2r ++ .Screen/x DEO2
RTN

@get-glyph-uf1 ( char^ -- addr* )
    TOS #30 SFT2 ;font ++
    #0100 ++ ( skip width data )
RTN

@midi-note ( note-and-octave^ -- hex-midi-note^ )
    DUP
    #0f AND INC #0c MUL ( octave offset )
    SWP 10/ ( note offset )
    ADD
RTN

~src/common.tal

@title-txt "Tracker 20 "WIP 00

@tile1
0000 0018 1800 0000
0000 0000 0000 0000

@tile2
ff81 bda5 a5bd 81ff
fffe c2de dede fe00

@cursor-tile
e781 8100 0081 81e7
0000 0000 0000 0000

@note-labels
"C-
"C#
"D-
"D#
"E-
"F-
"F#
"G-
"G#
"A-
"A#
"B-

@pattern
[ &note-octave 04 &instrument 00 &volume dd ]
00 00 dd
04 20 66
00 00 dd
04 10 fd
00 00 dd
04 20 44
04 10 24
04 00 ff
00 00 dd
04 20 44
00 00 dd
04 10 ff
00 00 dd
04 00 ff
00 00 dd

@instruments
[ &address :kick &size 2000 &loop 00 &file-path :kick-path ]
:snare 1000 00 :snare-path
:chat 2000 00 :chat-path
:ohat 1000 00 :ohat-path
:pulse 0100 01 :pulse-path
:saw 0100 01 :saw-path
:sin 0100 01 :sin-path
:piano 0100 01 :piano-path

@kick-path "assets/kck2.pcm 00
@kick $2000

@snare-path "assets/snr1.pcm 00
@snare $1000

@chat-path "assets/chat.pcm 00
@chat $2000

@ohat-path "assets/ohat.pcm 00
@ohat $1000

@pulse-path "assets/pulse.pcm 00
@pulse $0100

@saw-path "assets/saw.pcm 00
@saw $0100

@sin-path "assets/sin.pcm 00
@sin $0100

@piano-path "assets/piano.pcm 00
@piano $0100

@font-path "fonts/bbcmicro8.uf1 00
@font $0900
